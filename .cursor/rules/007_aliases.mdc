---
description: How aliases work in 3LC
globs: 
alwaysApply: false
---


## 3LC Aliases Overview

Aliases are text strings that represent parts of paths to objects, enabling flexible data location management and sharing. They automatically substitute path components in object URLs (e.g., `/data/project/1.jpg` becomes `<PROJECT_DATA>/1.jpg`).

### Core Functionality

- The `Url` class provides methods for alias handling:
  ```python
  url.to_relative()  # Returns URL relative to registered aliases
  url.to_absolute()  # Returns absolute URL (resolves aliases)
  url.apply_aliases()  # Converts absolute path to aliased form
  url.resolve_aliases()  # Converts aliased path to absolute form
  ```

- The `UrlAliasRegistry` class provides more helper methods and implementation
details for the alias system.

### Configuration Methods
1. **Project Aliases** (Recommended)
   ```python
   tlc.register_project_url_alias("PROJECT_DATA", "/data/project", project="my_project")
   ```
   - Stored in project's `default_aliases.3lc.yaml`
   - Bundled with project data
   - Available for current session and future starts

2. **Global Configuration**
   ```yaml
   # config.yaml
   aliases:
     PROJECT_DATA: /data/project
   ```

3. **Environment Variables**
   ```bash
   export TLC_ALIAS_PROJECT_DATA="/data/project"
   ```

### Best Practices
- Use project-specific aliases when possible
- Use descriptive, scoped names (e.g., `CUSTOMER_XYZ_DATA` over generic `DATA`)
- Ensure consistent alias configuration across all components
- Set up aliases before creating Tables/Runs
